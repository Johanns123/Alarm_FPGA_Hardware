library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity display_multiplex is
	port(
		signal CLK 				: in std_logic;
		signal RESET  			: in std_logic;
		signal noise_signal	: out std_logic;
		signal start			: in std_logic;
		signal dado1_read, dado2_read,
				 dado3_read, dado4_read		 : in unsigned(3 downto 0);
		signal dado1_signal, dado2_signal,
		dado3_signal, dado4_signal 		 : out unsigned(3 downto 0);
		signal modo1, modo2, modo3, modo4 : out unsigned(1 downto 0);
		signal contando 		: out std_logic;
		signal led_contagem_signal 	:  out std_logic_vector(3 downto 0)
	);
	
end entity display_multiplex;

architecture RTL of display_multiplex is

begin
	MUX  : process(clk_5ms, RESET) is
	begin
		if RESET = '0' then
			enable1 <= '0';
			enable2 <= '0';
			enable3 <= '0';
			enable4 <= '0';
			
		else
			if falling_edge(clk_5ms) then
				case mux_display is
					when disp1 =>
						enable1 <= '1';
						enable4 <= '0';
						mux_display <= disp2;
						
					when disp2 =>
						enable2 <= '1';
						enable1 <= '0';
						mux_display <= disp3;
					
					when disp3 =>
						enable3<= '1';
						enable2 <= '0';
						mux_display <= disp4;
						
					when disp4 =>
						enable4 <= '1';
						enable3 <= '0';
						mux_display <= disp1;
				end case;					
			end if;
		end if;
	end process MUX;

end architecture RTL;